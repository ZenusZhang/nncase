#pragma once

#include <cmath>
#include <cstring>
#include <cstdint>

// Generated by convert_rvv_to_scalar.py
// Scalar versions of RISC-V vector exp implementation for precision analysis

struct ExpDebugValues {
    double input_v; // Original input value
    double final_result; // Final computed result
    double a1_f1; // SSA variable a1_f1
    double a1_f2; // SSA variable a1_f2
    int32_t a2_f1; // SSA variable a2_f1
    int32_t a_f1; // SSA variable a_f1
    double b1_f1; // SSA variable b1_f1
    double b1_f2; // SSA variable b1_f2
    double b1_f3; // SSA variable b1_f3
    double b1_f4; // SSA variable b1_f4
    double b1_f5; // SSA variable b1_f5
    double b2_f1; // SSA variable b2_f1
    double b2_f2; // SSA variable b2_f2
    double b3_f1; // SSA variable b3_f1
    double b3_f2; // SSA variable b3_f2
    double b_f1; // SSA variable b_f1
    double c1_f1; // SSA variable c1_f1
    double c3_f1; // SSA variable c3_f1
    double c5_f1; // SSA variable c5_f1
    bool mask_f1; // SSA variable mask_f1
    int32_t ret_f1; // SSA variable ret_f1
    double tmp_f1; // SSA variable tmp_f1
    double tmp_f2; // SSA variable tmp_f2
    double x2_f1; // SSA variable x2_f1
    double x_f1; // SSA variable x_f1
    double x_f2; // SSA variable x_f2
    double x_f3; // SSA variable x_f3
    double x_f4; // SSA variable x_f4
    double x_f5; // SSA variable x_f5
};

ExpDebugValues exp_scalar_f32_debug(float v) {
    ExpDebugValues dbg = {};
    dbg.input_v = v;

    // Variable declarations
    int32_t a;
    float a1;
    int32_t a2;
    float b;
    float b1;
    float b2;
    float b3;
    float c1;
    float c3;
    float c5;
    bool mask;
    int32_t ret;
    float tmp;
    float x;
    float x2;

    // SSA operations with debug instrumentation
    float a1_f1 = c_cephes_LOG2EF; // auto a1 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_LOG2EF, vl)
    dbg.a1_f1 = a1_f1;
    float c1_f1 = c_cephes_exp_p1; // auto c1 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p1, vl)
    dbg.c1_f1 = c1_f1;
    float c3_f1 = c_cephes_exp_p3; // auto c3 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p3, vl)
    dbg.c3_f1 = c3_f1;
    float c5_f1 = c_cephes_exp_p5; // auto c5 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p5, vl)
    dbg.c5_f1 = c5_f1;
    float x_f1 = std::fmin(x_f1, c_exp_hi); // x = __riscv_vfmin_vf_f##TLEN##m##LMUL(x, c_exp_hi, vl)
    dbg.x_f1 = x_f1;
    float x_f2 = std::fmax(x_f2, c_exp_lo); // x = __riscv_vfmax_vf_f##TLEN##m##LMUL(x, c_exp_lo, vl)
    dbg.x_f2 = x_f2;
    float a1_f2 = a1_f2 * x_f2 + c5_f1; // /* express exp(x) as exp(g + n*log(2)) */                                       a1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(a1, x, c5, vl)
    dbg.a1_f2 = a1_f2;
    float tmp_f1 = static_cast<float>(__riscv_vfcvt_x_f_v_i##TLEN##m##LMUL(a1, vl)); // /* perform a floorf */                                                          auto tmp = __riscv_vfcvt_f_x_v_f##TLEN##m##LMUL(                                    __riscv_vfcvt_x_f_v_i##TLEN##m##LMUL(a1, vl), vl)
    dbg.tmp_f1 = tmp_f1;
    bool mask_f1 = (tmp_f1 > a1_f2); // auto mask = __riscv_vmfgt_vv_f##TLEN##m##LMUL##_b##MLEN(tmp, a1, vl)
    dbg.mask_f1 = mask_f1;
    float tmp_f2 = (mask_f1) ? ((tmp_f2) - (1.f)) : (tmp_f2); // tmp = __riscv_vfsub_vf_f##TLEN##m##LMUL##_m(mask, tmp, 1.f, vl)
    dbg.tmp_f2 = tmp_f2;
    float b1_f1 = c_cephes_exp_p0; // auto b1 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p0, vl)
    dbg.b1_f1 = b1_f1;
    float x_f3 = x_f3 - c_cephes_exp_C1 * tmp_f2; // x = __riscv_vfnmsac_vf_f##TLEN##m##LMUL(x, c_cephes_exp_C1, tmp, vl)
    dbg.x_f3 = x_f3;
    int32_t a2_f1 = static_cast<int32_t>(roundf(tmp_f2)); // auto a2 = __riscv_vfcvt_x_f_v_i##TLEN##m##LMUL(tmp, vl)
    dbg.a2_f1 = a2_f1;
    float b2_f1 = c_cephes_exp_p2; // auto b2 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p2, vl)
    dbg.b2_f1 = b2_f1;
    float x_f4 = x_f4 - c_cephes_exp_C2 * tmp_f2; // x = __riscv_vfnmsac_vf_f##TLEN##m##LMUL(x, c_cephes_exp_C2, tmp, vl)
    dbg.x_f4 = x_f4;
    float b3_f1 = c_cephes_exp_p4; // auto b3 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p4, vl)
    dbg.b3_f1 = b3_f1;
    float x2_f1 = x_f4 * x_f4; // auto x2 = __riscv_vfmul_vv_f##TLEN##m##LMUL(x, x, vl)
    dbg.x2_f1 = x2_f1;
    float b1_f2 = b1_f2 * x_f4 + c1_f1; // b1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b1, x, c1, vl)
    dbg.b1_f2 = b1_f2;
    float b2_f2 = b2_f2 * x_f4 + c3_f1; // b2 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b2, x, c3, vl)
    dbg.b2_f2 = b2_f2;
    float b3_f2 = b3_f2 * x_f4 + c5_f1; // b3 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b3, x, c5, vl)
    dbg.b3_f2 = b3_f2;
    float b1_f3 = b1_f3 * x2_f1 + b2_f2; // b1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b1, x2, b2, vl)
    dbg.b1_f3 = b1_f3;
    float x_f5 = x_f5 + 1.f; // x = __riscv_vfadd_vf_f##TLEN##m##LMUL(x, 1.f, vl)
    dbg.x_f5 = x_f5;
    float b1_f4 = b1_f4 * x2_f1 + b3_f2; // b1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b1, x2, b3, vl)
    dbg.b1_f4 = b1_f4;
    int32_t a_f1 = a2_f1 << M; // auto a = __riscv_vsll_vx_i##TLEN##m##LMUL(a2, M, vl)
    dbg.a_f1 = a_f1;
    float b1_f5 = b1_f5 * x2_f1 + x_f5; // b1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b1, x2, x, vl)
    dbg.b1_f5 = b1_f5;
    float b_f1 = memcpy(&b_f1_bits, &b1_f5, sizeof(b_f1_bits)); // auto b =                                                                            __riscv_vreinterpret_v_f##TLEN##m##LMUL##_i##TLEN##m##LMUL(b1)
    dbg.b_f1 = b_f1;
    int32_t ret_f1 = a_f1 + b_f1; // /* build 2^n */                                                                 auto ret = __riscv_vadd_vv_i##TLEN##m##LMUL(a, b, vl)
    dbg.ret_f1 = ret_f1;

    // Handle final result
    uint32_t result_bits;
    memcpy(&result_bits, &ret_f1, sizeof(result_bits));
    float final_float;
    memcpy(&final_float, &result_bits, sizeof(final_float));
    dbg.final_result = final_float;

    return dbg;
}

ExpDebugValues exp_scalar_f64_debug(double v) {
    ExpDebugValues dbg = {};
    dbg.input_v = v;

    // Variable declarations
    int32_t a;
    double a1;
    int32_t a2;
    double b;
    double b1;
    double b2;
    double b3;
    double c1;
    double c3;
    double c5;
    bool mask;
    int32_t ret;
    double tmp;
    double x;
    double x2;

    // SSA operations with debug instrumentation
    double a1_f1 = c_cephes_LOG2EF; // auto a1 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_LOG2EF, vl)
    dbg.a1_f1 = a1_f1;
    double c1_f1 = c_cephes_exp_p1; // auto c1 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p1, vl)
    dbg.c1_f1 = c1_f1;
    double c3_f1 = c_cephes_exp_p3; // auto c3 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p3, vl)
    dbg.c3_f1 = c3_f1;
    double c5_f1 = c_cephes_exp_p5; // auto c5 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p5, vl)
    dbg.c5_f1 = c5_f1;
    double x_f1 = std::fmin(x_f1, c_exp_hi); // x = __riscv_vfmin_vf_f##TLEN##m##LMUL(x, c_exp_hi, vl)
    dbg.x_f1 = x_f1;
    double x_f2 = std::fmax(x_f2, c_exp_lo); // x = __riscv_vfmax_vf_f##TLEN##m##LMUL(x, c_exp_lo, vl)
    dbg.x_f2 = x_f2;
    double a1_f2 = a1_f2 * x_f2 + c5_f1; // /* express exp(x) as exp(g + n*log(2)) */                                       a1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(a1, x, c5, vl)
    dbg.a1_f2 = a1_f2;
    double tmp_f1 = static_cast<float>(__riscv_vfcvt_x_f_v_i##TLEN##m##LMUL(a1, vl)); // /* perform a floorf */                                                          auto tmp = __riscv_vfcvt_f_x_v_f##TLEN##m##LMUL(                                    __riscv_vfcvt_x_f_v_i##TLEN##m##LMUL(a1, vl), vl)
    dbg.tmp_f1 = tmp_f1;
    bool mask_f1 = (tmp_f1 > a1_f2); // auto mask = __riscv_vmfgt_vv_f##TLEN##m##LMUL##_b##MLEN(tmp, a1, vl)
    dbg.mask_f1 = mask_f1;
    double tmp_f2 = (mask_f1) ? ((tmp_f2) - (1.f)) : (tmp_f2); // tmp = __riscv_vfsub_vf_f##TLEN##m##LMUL##_m(mask, tmp, 1.f, vl)
    dbg.tmp_f2 = tmp_f2;
    double b1_f1 = c_cephes_exp_p0; // auto b1 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p0, vl)
    dbg.b1_f1 = b1_f1;
    double x_f3 = x_f3 - c_cephes_exp_C1 * tmp_f2; // x = __riscv_vfnmsac_vf_f##TLEN##m##LMUL(x, c_cephes_exp_C1, tmp, vl)
    dbg.x_f3 = x_f3;
    int32_t a2_f1 = static_cast<int32_t>(roundf(tmp_f2)); // auto a2 = __riscv_vfcvt_x_f_v_i##TLEN##m##LMUL(tmp, vl)
    dbg.a2_f1 = a2_f1;
    double b2_f1 = c_cephes_exp_p2; // auto b2 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p2, vl)
    dbg.b2_f1 = b2_f1;
    double x_f4 = x_f4 - c_cephes_exp_C2 * tmp_f2; // x = __riscv_vfnmsac_vf_f##TLEN##m##LMUL(x, c_cephes_exp_C2, tmp, vl)
    dbg.x_f4 = x_f4;
    double b3_f1 = c_cephes_exp_p4; // auto b3 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p4, vl)
    dbg.b3_f1 = b3_f1;
    double x2_f1 = x_f4 * x_f4; // auto x2 = __riscv_vfmul_vv_f##TLEN##m##LMUL(x, x, vl)
    dbg.x2_f1 = x2_f1;
    double b1_f2 = b1_f2 * x_f4 + c1_f1; // b1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b1, x, c1, vl)
    dbg.b1_f2 = b1_f2;
    double b2_f2 = b2_f2 * x_f4 + c3_f1; // b2 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b2, x, c3, vl)
    dbg.b2_f2 = b2_f2;
    double b3_f2 = b3_f2 * x_f4 + c5_f1; // b3 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b3, x, c5, vl)
    dbg.b3_f2 = b3_f2;
    double b1_f3 = b1_f3 * x2_f1 + b2_f2; // b1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b1, x2, b2, vl)
    dbg.b1_f3 = b1_f3;
    double x_f5 = x_f5 + 1.f; // x = __riscv_vfadd_vf_f##TLEN##m##LMUL(x, 1.f, vl)
    dbg.x_f5 = x_f5;
    double b1_f4 = b1_f4 * x2_f1 + b3_f2; // b1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b1, x2, b3, vl)
    dbg.b1_f4 = b1_f4;
    int32_t a_f1 = a2_f1 << M; // auto a = __riscv_vsll_vx_i##TLEN##m##LMUL(a2, M, vl)
    dbg.a_f1 = a_f1;
    double b1_f5 = b1_f5 * x2_f1 + x_f5; // b1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b1, x2, x, vl)
    dbg.b1_f5 = b1_f5;
    double b_f1 = memcpy(&b_f1_bits, &b1_f5, sizeof(b_f1_bits)); // auto b =                                                                            __riscv_vreinterpret_v_f##TLEN##m##LMUL##_i##TLEN##m##LMUL(b1)
    dbg.b_f1 = b_f1;
    int32_t ret_f1 = a_f1 + b_f1; // /* build 2^n */                                                                 auto ret = __riscv_vadd_vv_i##TLEN##m##LMUL(a, b, vl)
    dbg.ret_f1 = ret_f1;

    // Handle final result
    uint32_t result_bits;
    memcpy(&result_bits, &ret_f1, sizeof(result_bits));
    double final_float;
    memcpy(&final_float, &result_bits, sizeof(final_float));
    dbg.final_result = final_float;

    return dbg;
}

