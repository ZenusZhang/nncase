name: runtime-build

on:
  push:
    paths:
      - 'ntt/**'
  pull_request:
    paths:
      - 'ntt/**'
  workflow_dispatch:
    inputs:
      enable_diagnostics:
        description: 'Set to true to gather extended diagnostics (optional)'
        required: false
        default: 'true'

concurrency:
  group: runtime-build-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' && !startsWith(github.ref, 'refs/heads/release/') }}

jobs:
  build-native-runtime:
    name: build-runtime-${{matrix.config.name}}
    runs-on: ${{matrix.config.os}}
    strategy:
      matrix:
        config:
          - { name: aarch64-macos, os: macos-14, buildType: Release }
          - { name: x86_64-linux, os: ubuntu-24.04, buildType: Release }
          # - { name: x86_64-windows, os: windows-latest, arch: x64, buildType: Release }
    steps:
      - uses: actions/checkout@v3
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set up build environment (Windows, Visual Studio)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{matrix.config.arch}}
        if: runner.os == 'Windows'

      - name: Set up build environment (Linux)
        run: |
          echo "CC=gcc-14" >> $GITHUB_ENV
          echo "CXX=g++-14" >> $GITHUB_ENV
        if: runner.os == 'Linux'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Print runner diagnostics
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "Diagnostics timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "Workflow attempt: ${GITHUB_RUN_ATTEMPT:-unknown}"
          echo "Runner name: ${RUNNER_NAME:-unknown} (${RUNNER_OS:-unknown})"
          echo "Job: ${GITHUB_JOB:-unknown}"
          echo "Ref: ${GITHUB_REF:-unknown}"
          echo "Commit: ${GITHUB_SHA:-unknown}"
          echo '--- cpu/memory ---'
          nproc || true
          lscpu || true
          free -h || true
          echo '--- disk ---'
          df -h
          echo '--- top processes ---'
          ps -eo pid,ppid,stat,pcpu,pmem,etime,cmd | head -n 40
        if: runner.os == 'Linux'

      - name: Install Conan
        run: |
          pip install conan==2.6.0
          pip install cmake==3.30.3
          conan remote add sunnycase https://conan.sunnycase.moe --index 0
          conan remote update conancenter --url "https://center2.conan.io"

      - name: Configure
        shell: bash
        run: |
          conan install . --build=missing -s build_type=${{matrix.config.buildType}} -pr:a=toolchains/${{matrix.config.name}}.profile.jinja -o "&:runtime=True" -o "&:python=True" -o "&:tests=True"
          cmake --preset conan-runtime-release

      - name: Build & Install
        shell: bash
        run: |
          set -Eeuo pipefail

          diag_on_signal() {
            local code=$?
            echo "::error::Build interrupted (signal) at $(date -u +%Y-%m-%dT%H:%M:%SZ) with exit ${code}"
            echo "::group::Recent processes"
            ps -eo pid,ppid,stat,pcpu,pmem,etime,cmd | head -n 40 || true
            echo "::endgroup::"
            echo "::group::Disk usage"
            df -h || true
            echo "::endgroup::"
            exit 143
          }

          diag_on_error() {
            local code=$?
            echo "::error::Build step failed at $(date -u +%Y-%m-%dT%H:%M:%SZ) with exit ${code}"
            echo "::group::CMake/Ninja logs tail"
            tail -n 200 build/${{matrix.config.buildType}}/CMakeFiles/CMakeOutput.log 2>/dev/null || true
            tail -n 200 build/${{matrix.config.buildType}}/CMakeFiles/CMakeError.log 2>/dev/null || true
            echo "::endgroup::"
            echo "::group::Recent processes"
            ps -eo pid,ppid,stat,pcpu,pmem,etime,cmd | head -n 40 || true
            echo "::endgroup::"
          }

          trap 'diag_on_signal' TERM INT
          trap 'diag_on_error' ERR

          echo "Starting cmake build at $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          cmake --build build/${{matrix.config.buildType}} --config ${{matrix.config.buildType}}
          echo "Build finished at $(date -u +%Y-%m-%dT%H:%M:%SZ)"

          cmake --install build/${{matrix.config.buildType}} --prefix install
          echo "Install finished at $(date -u +%Y-%m-%dT%H:%M:%SZ)"

      - name: Test
        run: |
          cd build/${{matrix.config.buildType}}
          ctest -C ${{matrix.config.buildType}} --test-dir ntt/test/ctest --output-on-failure -j4
        if: runner.os != 'Windows'

      #- name: Benchmark
      #  run: |
      #    ${{github.workspace}}/install/bin/benchnncase > benchnncase.log
      #    cat benchnncase.log

      - name: Upload nncaseruntime Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nncaseruntime-${{matrix.config.name}}
          path: ${{github.workspace}}/install
          if-no-files-found: error

    #- name: Upload nncaseruntime Benchmark
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: nncaseruntime-benchmark-${{matrix.config.name}}
    #    path: ${{github.workspace}}/benchnncase.log
    #    if-no-files-found: error

  build-cross-linux-runtime:
    name: build-runtime-${{matrix.config.name}}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config:
          - { name: riscv64-k230-linux, profile: riscv64-linux, toolchainPrefix: riscv64-unknown-linux-gnu-, toolchainFile: riscv64-unknown-linux_gnu_14.2.0, qemu: qemu-riscv64, loaderArgs: '-cpu;rv64,v=true,Zfh=true,zvfh=true,vlen=128,elen=64,vext_spec=v1.0;-L', conanInstallArgs: '-o "&:k230_runtime=True"', buildType: Release }

    steps:
      - uses: actions/checkout@v3
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install toolchain and QEMU
        shell: bash
        run: |
          wget https://dav.sunnycase.moe/d/ci/nncase/${{matrix.config.toolchainFile}}.tar.zst -O toolchain.tar.zst
          sudo apt install zstd
          sudo tar -I zstd -xf toolchain.tar.zst -C $GITHUB_WORKSPACE

          wget https://dav.sunnycase.moe/d/ci/nncase/${{matrix.config.qemu}}.tgz -O qemu.tgz
          sudo tar xf qemu.tgz -C /usr/local/bin
          sudo chmod a+x /usr/local/bin/${{matrix.config.qemu}}
          echo "TESTS_EXECUTABLE_LOADER=${{matrix.config.qemu}}" >> $GITHUB_ENV
          echo "TESTS_EXECUTABLE_LOADER_ARGUMENTS=${{matrix.config.loaderArgs}};$GITHUB_WORKSPACE/${{matrix.config.toolchainFile}}/sysroot" >> $GITHUB_ENV
          echo "CC=$GITHUB_WORKSPACE/${{matrix.config.toolchainFile}}/bin/${{matrix.config.toolchainPrefix}}gcc" >> $GITHUB_ENV
          echo "CXX=$GITHUB_WORKSPACE/${{matrix.config.toolchainFile}}/bin/${{matrix.config.toolchainPrefix}}g++" >> $GITHUB_ENV

      - name: Print runner diagnostics
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "Diagnostics timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "Workflow attempt: ${GITHUB_RUN_ATTEMPT:-unknown}"
          echo "Runner name: ${RUNNER_NAME:-unknown} (${RUNNER_OS:-unknown})"
          echo "Job: ${GITHUB_JOB:-unknown}"
          echo "Ref: ${GITHUB_REF:-unknown}"
          echo "Commit: ${GITHUB_SHA:-unknown}"
          echo '--- cpu/memory ---'
          nproc || true
          lscpu || true
          free -h || true
          echo '--- disk ---'
          df -h
          echo '--- top processes ---'
          ps -eo pid,ppid,stat,pcpu,pmem,etime,cmd | head -n 40

      - name: Install Conan
        run: |
          pip install conan==2.6.0
          pip install cmake==3.30.3
          conan remote add sunnycase https://conan.sunnycase.moe --index 0
          conan remote update conancenter --url "https://center2.conan.io"

      - name: Configure
        shell: bash
        run: |
          conan install . --build=missing -s build_type=${{matrix.config.buildType}} -pr:h=toolchains/${{matrix.config.profile}}.profile.jinja -pr:b=toolchains/x86_64-linux.profile.jinja -o "&:runtime=True" -o "&:python=True" -o "&:tests=True" ${{matrix.config.conanInstallArgs}}
          cmake --preset conan-runtime-release

      - name: Build & Install
        shell: bash
        run: |
          set -Eeuo pipefail

          diag_on_signal() {
            local code=$?
            echo "::error::Build interrupted (signal) at $(date -u +%Y-%m-%dT%H:%M:%SZ) with exit ${code}"
            echo "::group::Recent processes"
            ps -eo pid,ppid,stat,pcpu,pmem,etime,cmd | head -n 40 || true
            echo "::endgroup::"
            echo "::group::Disk usage"
            df -h || true
            echo "::endgroup::"
            exit 143
          }

          diag_on_error() {
            local code=$?
            echo "::error::Build step failed at $(date -u +%Y-%m-%dT%H:%M:%SZ) with exit ${code}"
            echo "::group::CMake/Ninja logs tail"
            tail -n 200 build/${{matrix.config.buildType}}/CMakeFiles/CMakeOutput.log 2>/dev/null || true
            tail -n 200 build/${{matrix.config.buildType}}/CMakeFiles/CMakeError.log 2>/dev/null || true
            echo "::endgroup::"
            echo "::group::Recent processes"
            ps -eo pid,ppid,stat,pcpu,pmem,etime,cmd | head -n 40 || true
            echo "::endgroup::"
          }

          trap 'diag_on_signal' TERM INT
          trap 'diag_on_error' ERR

          echo "Starting cmake build at $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          cmake --build build/${{matrix.config.buildType}} --config ${{matrix.config.buildType}}
          echo "Build finished at $(date -u +%Y-%m-%dT%H:%M:%SZ)"

          cmake --install build/${{matrix.config.buildType}} --prefix install
          echo "Install finished at $(date -u +%Y-%m-%dT%H:%M:%SZ)"

      - name: Test
        shell: bash
        run: |
          cd build/${{matrix.config.buildType}}
          ctest -C ${{matrix.config.buildType}} --test-dir ntt/test/ctest --output-on-failure -j4

      - name: Upload nncaseruntime Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nncaseruntime-${{matrix.config.name}}
          path: ${{github.workspace}}/install
          if-no-files-found: error
